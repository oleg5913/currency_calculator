{"version":3,"sources":["components/Calculator.js","App.js","data/rootReduer.js","data/reduxStore.js","index.js","data/types.js","api/api.js","data/CalculatorReducer.js"],"names":["connect","state","inputString","calculator","newValues","result","insertValueActionCreator","cleanStringActionCreator","backActionCreator","calculationThunkCreator","props","useState","formData","setFormData","disableSymbols","setDisableSymbols","selectedPair","setPair","multiplyMode","setMultuplyMode","equalShow","setEqualShow","handleClick","value","newCell","type","alert","className","name","onChange","e","target","class","map","item","onClick","App","rootReducer","combineReducers","CalculatorReducer","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","INSERT_VALUE","CLEAN_STRING","BACK","SET_CURRENCIES","CONVERSION","instance","Axios","create","baseURL","currenciesAPI","getCurrencies","get","then","response","data","rates","initialState","currencies","action","number","newVal","pair","toFixed","join","res","eval","slice","length","conversionActionCreator","setCurrenciesActionCreator","dispatch","a"],"mappings":"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","file":"static/js/main.401cd6d6.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { backActionCreator, calculationThunkCreator, cleanStringActionCreator, insertValueActionCreator } from '../data/CalculatorReducer'\r\nimport './Calculator.css'\r\n\r\nconst Calculator = (props) => {\r\n    /* \r\n    result = eval(state.numbers.map(item => return item.value))\r\n    чтобы перемножить на курс - state.numbers.map(item => проверка наличия типа item.type=number item.value *course)\r\n    */\r\n    const [formData, setFormData] = useState(\"\")\r\n    const [disableSymbols, setDisableSymbols] = useState(true)\r\n    const [selectedPair, setPair] = useState('')\r\n    const [multiplyMode, setMultuplyMode] = useState(false)\r\n    const [equalShow, setEqualShow] = useState(false)\r\n    const handleChange = (e) => {\r\n        const value = e.target.value\r\n        setPair(value)\r\n    }\r\n    const handleClick = (value) => {\r\n        let newCell = {\r\n            type: \"\",\r\n            value: null\r\n        }\r\n        if (value >= 0 | value === \".\") {\r\n            setFormData(formData + value)\r\n            setDisableSymbols(false)\r\n        }\r\n        if (value === \"+\" | value === \"-\" | value === \"(\" | value === \")\") {\r\n            if (!disableSymbols) {\r\n                setDisableSymbols(true)\r\n                newCell = {\r\n                    ...newCell,\r\n                    type: multiplyMode ? \"multiplier\" : \"number\",\r\n                    value: formData\r\n                }\r\n                props.insertValueActionCreator(newCell)\r\n                setFormData(\"\")\r\n                newCell = {\r\n                    ...newCell,\r\n                    type: \"symbol\",\r\n                    value: value\r\n                }\r\n                props.insertValueActionCreator(newCell)\r\n                setMultuplyMode(false)\r\n            }\r\n        }\r\n        if (value === \"*\" | value === \"/\") {\r\n            setMultuplyMode(true)\r\n            if (!disableSymbols) {\r\n                setDisableSymbols(true)\r\n                newCell = {\r\n                    ...newCell,\r\n                    type: multiplyMode ? \"multiplier\" : \"number\",\r\n                    value: formData\r\n                }\r\n                props.insertValueActionCreator(newCell)\r\n                setFormData(value)\r\n                newCell = {\r\n                    ...newCell,\r\n                    type: \"multiplier\",\r\n                    value: value\r\n                }\r\n                props.insertValueActionCreator(newCell)\r\n                setFormData(\"\")\r\n            }\r\n        }\r\n        if (value === 'clear') {\r\n            setMultuplyMode(false)\r\n            setFormData('')\r\n            setDisableSymbols(true)\r\n            props.cleanStringActionCreator()\r\n            setEqualShow(false)\r\n        }\r\n        if (value === 'back') {\r\n            formData ? setFormData('') : props.backActionCreator()\r\n        }\r\n        if (value === 'equal') {\r\n            if (selectedPair !== '' && selectedPair !== 'Выберите валюту') {\r\n                if (!disableSymbols) {\r\n                    setDisableSymbols(true)\r\n                    newCell = {\r\n                        ...newCell,\r\n                        type: multiplyMode ? \"multiplier\" : \"number\",\r\n                        value: formData\r\n                    }\r\n                    props.insertValueActionCreator(newCell)\r\n                    setFormData('')\r\n                    setDisableSymbols(true)\r\n                    props.calculationThunkCreator(selectedPair)\r\n                    setEqualShow(true)\r\n                }\r\n            } else alert('Выберите валюту')\r\n        }\r\n        //режим умножения\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"selectWrap\">\r\n                <select\r\n                    name=\"currencySelect\"\r\n                    onChange={handleChange}\r\n                >\r\n                    <option>Выберите валюту для расчета</option>\r\n                    <option>USD</option>\r\n                    <option>EUR</option>\r\n                    <option>BYN</option>\r\n                    <option>UAH</option>\r\n                    <option>AMD</option>\r\n                    <option>MDL</option>\r\n                    <option>AZN</option>\r\n                    <option>TJS</option>\r\n                    <option>UZS</option>\r\n                    <option>KZT</option>\r\n                    <option>TRY</option>\r\n                    <option>SEK</option>\r\n                    <option>CZK</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"calculatorWrap\">\r\n                <div class=\"calculator\">\r\n                    <div className=\"item form\"><p>{props.inputString.map(item => item.value)}{formData}</p></div>\r\n                    <div className=\"item clean symbol\" onClick={() => handleClick(\"clear\")}>C</div>\r\n                    <div className=\"item back symbol\" onClick={() => handleClick(\"back\")}>&larr;</div>\r\n                    <div className=\"item symbol\" onClick={() => handleClick(\"+\")}>+</div>\r\n                    <div className=\"item symbol\" onClick={() => handleClick(\"-\")}>-</div>\r\n                    <div className=\"item symbol\" onClick={() => handleClick(\"*\")}>&times;</div>\r\n                    <div className=\"item symbol\" onClick={() => handleClick(\"/\")}>&divide;</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"7\")}>7</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"8\")}>8</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"9\")}>9</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"(\")}>(</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"4\")}>4</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"5\")}>5</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"6\")}>6</div>\r\n                    <div className=\"item\" onClick={() => handleClick(\")\")}>)</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"1\")}>1</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"2\")}>2</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\"3\")}>3</div>\r\n                    <div className=\"item equal\" onClick={() => handleClick(\"equal\")}>=</div>\r\n                    <div className=\"item number zero\" onClick={() => handleClick(\"0\")}>0</div>\r\n                    <div className=\"item number\" onClick={() => handleClick(\".\")}>.</div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"result\">\r\n                        <p>{props.newValues} {equalShow ? ' = ' : null} {props.result}</p>\r\n                    </div>\r\n                    <div className=\"instruction\">\r\n                        <h2>Инструкция</h2>\r\n                        <p>Выбери из списка валюту, в которую хочешь перевести и введи расчет в рублях в калькулятор. При умножении и делении вводи числа в таком порядке: ЦЕНА ЗА ТОВАР * КОЛИЧЕСТВО ТОВАРА</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        inputString: state.calculator.inputString,\r\n        newValues: state.calculator.newValues,\r\n        result: state.calculator.result\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    insertValueActionCreator,\r\n    cleanStringActionCreator,\r\n    backActionCreator,\r\n    calculationThunkCreator\r\n})(Calculator)","import './App.css';\nimport Calculator from './components/Calculator';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { CalculatorReducer } from \"./CalculatorReducer\";\r\nimport { reducer as formReducer} from 'redux-form'\r\n\r\nlet rootReducer = combineReducers({\r\n    calculator: CalculatorReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport default rootReducer","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReduer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer,  composeEnhancers(\r\n    applyMiddleware(thunk)\r\n  ))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './data/reduxStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n            <App />\n        </Provider>,\n  document.getElementById('root')\n);\n","export const INSERT_VALUE = \"INSERT-VALUE\"\r\nexport const CLEAN_STRING = \"CLEAN-STRING\"\r\nexport const BACK = \"BACK\"\r\nexport const SET_CURRENCIES = \"SET-CURRENCIES\"\r\nexport const CONVERSION = \"CONVERSION\"","import Axios from \"axios\";\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://www.cbr-xml-daily.ru/latest.js'\r\n})\r\n\r\nexport const currenciesAPI = {\r\n    getCurrencies() {\r\n        return instance.get()\r\n            .then(response => response.data.rates)\r\n    }  \r\n}","import { currenciesAPI } from \"../api/api\"\r\nimport { BACK, CLEAN_STRING, CONVERSION, INSERT_VALUE, SET_CURRENCIES } from \"./types\"\r\n\r\nconst initialState = {\r\n    currencies: {},\r\n    inputString: [],\r\n    newValues: [],\r\n    result: \"\"\r\n}\r\n\r\nexport const CalculatorReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_CURRENCIES:\r\n            return {\r\n                ...state,\r\n                currencies: action.currencies\r\n            }\r\n        case INSERT_VALUE:\r\n            return {\r\n                ...state,\r\n                inputString: [...state.inputString, action.number]\r\n            }\r\n        case CLEAN_STRING:\r\n            return {\r\n                ...state,\r\n                inputString: [],\r\n                newValues: [],\r\n                result: []\r\n            }\r\n        case CONVERSION:\r\n            let newVal = state.inputString.map(item => item.type === 'number' ? (item.value * state.currencies[action.pair]).toFixed(2) : item.value).join(' ')\r\n            let res = eval(newVal).toFixed(2)\r\n            return {\r\n                ...state,\r\n                newValues: newVal,\r\n                result: res\r\n            }\r\n        case BACK:\r\n            return {\r\n                ...state, \r\n                inputString: [...state.inputString.slice(0, state.inputString.length -1)]\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const insertValueActionCreator = (number) => {\r\n    return {\r\n        type: INSERT_VALUE, number\r\n    }\r\n}\r\n\r\nexport const cleanStringActionCreator = () => {\r\n    return {\r\n        type: CLEAN_STRING\r\n    }\r\n}\r\n\r\nconst conversionActionCreator = (pair) => {\r\n    return {\r\n        type: CONVERSION, pair\r\n    }\r\n}\r\n\r\nconst setCurrenciesActionCreator = (currencies) => {\r\n    return {\r\n        type: SET_CURRENCIES, currencies\r\n    }\r\n}\r\n\r\nexport const backActionCreator = () => {\r\n    return {\r\n        type: BACK\r\n    }\r\n}\r\n\r\nexport const calculationThunkCreator = (pair) => async (dispatch) => {\r\n    let response = await currenciesAPI.getCurrencies()\r\n    dispatch(setCurrenciesActionCreator(response))\r\n    dispatch(conversionActionCreator(pair))\r\n}\r\n\r\n"],"sourceRoot":""}